{
  "name": "pptx-to-video-tts",
  "nodes": [
    {
      "parameters": {
        "httpMethod": "POST",
        "path": "pptx_to_video",
        "responseMode": "responseNode",
        "options": {
          "allowedOrigins": "*"
        }
      },
      "name": "Webhook",
      "type": "n8n-nodes-base.webhook",
      "typeVersion": 1,
      "position": [
        -1984,
        1008
      ],
      "id": "9bc09c72-7dbc-4893-b0f5-a49709d04e98",
      "webhookId": "755b267a-e2f0-4bd1-a01c-52c1fa69c938",
      "alwaysOutputData": false
    },
    {
      "parameters": {
        "functionCode": "// Prepare Slides — возвращает отдельный item для каждого слайда\nconst payload = items[0]?.json || {};\n\n// Возможные варианты входа:\n// 1) payload.slides = [ {...}, {...} ]\n// 2) payload.body.slides = ...\n// 3) payload — сам уже массив слайдов\nlet slides = [];\n\n// 1) если payload.slides — используем его\nif (Array.isArray(payload.slides)) {\n  slides = payload.slides;\n} else if (payload.body && Array.isArray(payload.body.slides)) {\n  // 2) если payload.body.slides\n  slides = payload.body.slides;\n} else if (Array.isArray(payload)) {\n  // 3) если payload itself is array (rare)\n  slides = payload;\n} else if (Array.isArray(items[0]?.json?.slides)) {\n  // ещё запасной вариант\n  slides = items[0].json.slides;\n}\n\n// Гарантируем, что slides — массив\nif (!Array.isArray(slides)) slides = [];\n\n// Возвращаем N items, каждый item = один слайд (и добавляем slide_index если его нет)\nreturn slides.map((s, i) => {\n  const slide = (typeof s === 'object' && s !== null) ? s : { notes: String(s) };\n  if (!slide.slide_index) slide.slide_index = i + 1;\n  return { json: slide };\n});\n"
      },
      "name": "Prepare Slides",
      "type": "n8n-nodes-base.function",
      "typeVersion": 1,
      "position": [
        -560,
        704
      ],
      "id": "94240dfe-2a85-4b05-ae69-9458c47bfcf2"
    },
    {
      "parameters": {
        "functionCode": "// Make Image Binary — корректно формируем items[n].binary.slideImage\nconst item = items[0] || { json: {} };\n\n// Получаем слайд индекс и base64-строку\nconst slideIndex = item.json.slide_index ?? item.json.index ?? 0;\nlet imageBase64 = (item.json.image_base64 || '').toString();\n\n// Убираем возможный префикс data:image/...;base64,\nimageBase64 = imageBase64.replace(/^data:image\\/\\w+;base64,/, '').trim();\n\n// Инициализируем object.binary\nitem.binary = item.binary || {};\n\n// Если есть картинка — создаём корректное бинарное поле\nif (imageBase64 && imageBase64.length > 10) { // простая проверка длины\n  item.binary.slideImage = {\n    data: imageBase64, // НУЖНО: base64-строка (без префикса)\n    fileName: `slide_${slideIndex}.png`,\n    mimeType: 'image/png',\n  };\n} else {\n  // Если картинки нет — можно положить заглушку (простой 1x1 png) или оставить пустым.\n  // Ниже — прозрачный 1x1 PNG в base64 (необязательно):\n  const transparent1x1 = 'iVBORw0KGgoAAAANSUhEUgAAAAEAAAABCAQAAAC1HAwCAAAAC0lEQVR4nGNgYAAAAAMAASsJTYQAAAAASUVORK5CYII=';\n  item.binary.slideImage = {\n    data: transparent1x1,\n    fileName: `slide_${slideIndex}.png`,\n    mimeType: 'image/png',\n  };\n}\n\n// Записываем пути файлов в json для последующих нод\nitem.json.image_file = `slide_${slideIndex}.png`;\nitem.json.audio_file = `slide_${slideIndex}.wav`;\nitem.json.video_file = `videos/slide_${slideIndex}.mov`;\nitem.json.slide_index = slideIndex;\n\nreturn [item];\n"
      },
      "name": "Make Image Binary",
      "type": "n8n-nodes-base.function",
      "typeVersion": 1,
      "position": [
        -240,
        192
      ],
      "id": "28a35794-db09-4d83-ad1c-588993083fd5",
      "executeOnce": true,
      "alwaysOutputData": true,
      "notesInFlow": false
    },
    {
      "parameters": {
        "authentication": "basicAuth",
        "url": "http://host.docker.internal:5500/api/tts",
        "allowUnauthorizedCerts": true,
        "responseFormat": "file",
        "options": {},
        "queryParametersUi": {
          "parameter": [
            {
              "name": "voice",
              "value": "glow-speak:ru_nikolaev"
            },
            {
              "name": "lang",
              "value": "ru"
            },
            {
              "name": "vocoder",
              "value": "vocoder"
            },
            {
              "name": "denoiserStrength",
              "value": "0.005"
            },
            {
              "name": "text",
              "value": "={{ $('Make Image Binary').item.json.notes }}"
            },
            {
              "name": "ssml",
              "value": "false"
            },
            {
              "name": "ssmlNumbers",
              "value": "true"
            },
            {
              "name": "ssmlDates",
              "value": "true"
            },
            {
              "name": "ssmlCurrency",
              "value": "true"
            },
            {
              "name": "cache",
              "value": "true"
            }
          ]
        }
      },
      "name": "HTTP Request (TTS)",
      "type": "n8n-nodes-base.httpRequest",
      "typeVersion": 1,
      "position": [
        288,
        160
      ],
      "id": "16e1d434-56d0-4895-aaee-24bd1fe9b6c3",
      "credentials": {
        "httpBasicAuth": {
          "id": "XGSMevp4mssOzlzs",
          "name": "Unnamed credential"
        }
      }
    },
    {
      "parameters": {
        "fileName": "={{ $('Make Image Binary').item.json.audio_file }}",
        "options": {}
      },
      "name": "Write Audio File",
      "type": "n8n-nodes-base.writeBinaryFile",
      "typeVersion": 1,
      "position": [
        432,
        336
      ],
      "id": "7fef76f4-5a17-42fe-a680-7e92a1c58734"
    },
    {
      "parameters": {
        "command": "=ffprobe -v error -show_entries format=duration -of csv=p=0 {{ $('Make Image Binary').item.json.audio_file }}"
      },
      "name": "ffprobe Get Duration",
      "type": "n8n-nodes-base.executeCommand",
      "typeVersion": 1,
      "position": [
        656,
        256
      ],
      "id": "8b5d9283-1d4d-41cc-ab02-85a78f2ed981"
    },
    {
      "parameters": {
        "functionCode": "const out = items[0].json['stdout'] || items[0].json['output'] || '';\nlet duration = parseFloat((out || '').toString().trim());\nif (!isFinite(duration) || duration <= 0) {\n  duration = 1.0;\n}\nitems[0].json.duration = duration;\nreturn items;"
      },
      "name": "Parse Duration",
      "type": "n8n-nodes-base.function",
      "typeVersion": 1,
      "position": [
        880,
        256
      ],
      "id": "1028454b-5bdf-4de1-938b-1c0077faf752"
    },
    {
      "parameters": {
        "command": "=ffmpeg -y -loop 1 -i {{ $('Make Image Binary').item.json.image_file }} -i {{ $('Make Image Binary').item.json.audio_file }} -c:v libx264 -t {{ $json.stdout }} -pix_fmt yuv420p -vf \"scale=1280:720\" -c:a aac -b:a 192k {{ $('Make Image Binary').item.json.video_file }}"
      },
      "name": "ffmpeg Create Slide Video",
      "type": "n8n-nodes-base.executeCommand",
      "typeVersion": 1,
      "position": [
        880,
        512
      ],
      "id": "d9bc0e8a-8ffd-4584-92b7-dbfa5d94b1d6"
    },
    {
      "parameters": {
        "command": "rm ans.mp4; ffmpeg -f concat -safe 0 -i file_list.txt -c:v libx264 -preset veryfast -crf 23 -c:a aac -b:a 192k ans.mp4;"
      },
      "name": "ffmpeg Concat",
      "type": "n8n-nodes-base.executeCommand",
      "typeVersion": 1,
      "position": [
        320,
        848
      ],
      "id": "f981dc3c-320f-44d9-99e8-ad446ba76296"
    },
    {
      "parameters": {
        "options": {
          "reset": "="
        }
      },
      "type": "n8n-nodes-base.splitInBatches",
      "typeVersion": 3,
      "position": [
        -32,
        864
      ],
      "id": "0a51c8ff-5b2d-44d4-af45-470167d2521b",
      "name": "Loop Over Items",
      "executeOnce": false
    },
    {
      "parameters": {
        "respondWith": "binary",
        "responseDataSource": "set",
        "options": {}
      },
      "type": "n8n-nodes-base.respondToWebhook",
      "typeVersion": 1.4,
      "position": [
        784,
        848
      ],
      "id": "5b12d1a0-c542-4a77-8cc5-e76deffc8abc",
      "name": "Respond to Webhook",
      "alwaysOutputData": false
    },
    {
      "parameters": {
        "command": "=rm -rf videos\n\nmkdir videos\necho \"\" > file_list.txt\nrm file_list.txt"
      },
      "name": "mkdir",
      "type": "n8n-nodes-base.executeCommand",
      "typeVersion": 1,
      "position": [
        -960,
        560
      ],
      "id": "6dd4acfc-32a6-4456-baae-ce0114400590"
    },
    {
      "parameters": {
        "command": "=echo \"file '{{ $('Make Image Binary').item.json.video_file }}' \" >> file_list.txt\n"
      },
      "name": "name saver",
      "type": "n8n-nodes-base.executeCommand",
      "typeVersion": 1,
      "position": [
        -80,
        704
      ],
      "id": "fd1ff473-5ec9-42f2-8399-7e0c2ba7c3ec"
    },
    {
      "parameters": {
        "fileName": "={{ $json.image_file }}",
        "dataPropertyName": "slideImage",
        "options": {}
      },
      "name": "Write Audio File1",
      "type": "n8n-nodes-base.writeBinaryFile",
      "typeVersion": 1,
      "position": [
        0,
        0
      ],
      "id": "8a9f5742-ea85-4add-a994-0e556743fea0"
    },
    {
      "parameters": {
        "fileSelector": "ans.mp4",
        "options": {}
      },
      "type": "n8n-nodes-base.readWriteFile",
      "typeVersion": 1,
      "position": [
        656,
        1168
      ],
      "id": "a3d0099a-206a-4301-bd88-ed24bea3f9fc",
      "name": "Read/Write Files from Disk"
    },
    {
      "parameters": {
        "method": "POST",
        "url": "http://host.docker.internal:8081/convert",
        "sendBody": true,
        "contentType": "multipart-form-data",
        "bodyParameters": {
          "parameters": [
            {
              "parameterType": "formBinaryData",
              "name": "file",
              "inputDataFieldName": "file"
            }
          ]
        },
        "options": {}
      },
      "type": "n8n-nodes-base.httpRequest",
      "typeVersion": 4.2,
      "position": [
        -1648,
        992
      ],
      "id": "4c0c6f21-0507-4a51-b3da-3ba408d5b84d",
      "name": "HTTP Request"
    }
  ],
  "pinData": {},
  "connections": {
    "Webhook": {
      "main": [
        [
          {
            "node": "HTTP Request",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Prepare Slides": {
      "main": [
        [
          {
            "node": "Loop Over Items",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Make Image Binary": {
      "main": [
        [
          {
            "node": "Write Audio File1",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "HTTP Request (TTS)": {
      "main": [
        [
          {
            "node": "Write Audio File",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Write Audio File": {
      "main": [
        [
          {
            "node": "ffprobe Get Duration",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "ffprobe Get Duration": {
      "main": [
        [
          {
            "node": "Parse Duration",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Parse Duration": {
      "main": [
        [
          {
            "node": "ffmpeg Create Slide Video",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "ffmpeg Create Slide Video": {
      "main": [
        [
          {
            "node": "name saver",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "ffmpeg Concat": {
      "main": [
        [
          {
            "node": "Read/Write Files from Disk",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Loop Over Items": {
      "main": [
        [
          {
            "node": "ffmpeg Concat",
            "type": "main",
            "index": 0
          }
        ],
        [
          {
            "node": "Make Image Binary",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "mkdir": {
      "main": [
        [
          {
            "node": "Prepare Slides",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "name saver": {
      "main": [
        [
          {
            "node": "Loop Over Items",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Write Audio File1": {
      "main": [
        [
          {
            "node": "HTTP Request (TTS)",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Read/Write Files from Disk": {
      "main": [
        [
          {
            "node": "Respond to Webhook",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "HTTP Request": {
      "main": [
        [
          {
            "node": "mkdir",
            "type": "main",
            "index": 0
          },
          {
            "node": "Prepare Slides",
            "type": "main",
            "index": 0
          }
        ]
      ]
    }
  },
  "active": false,
  "settings": {
    "executionOrder": "v1"
  },
  "versionId": "fd356a47-6952-4b79-9daf-f76658ecd6ef",
  "meta": {
    "instanceId": "bd24d81438ad333166572f7a9f13d1db74f85c37d58472072793d11beec8d956"
  },
  "id": "sQi3ZlnOQUzka8GZ",
  "tags": []
}